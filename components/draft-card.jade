dom-module#quill-draft-card
  template
    style.
      :host ::content #editor {
        min-height: 6em;
        font-size: 1.2em;
        padding: 2em;
      }
      
      :host ::content #editor:focus {
        outline: none;
      }
      

    .content
      .ui.buttons.right.floated.meta
        a.ui.mini.basic.icon.button(on-tap="_enableEditing")
          i.edit.icon
        a.ui.mini.basic.icon.button(on-tap="_toggleSourceView")
          i.code.icon
      .text.content
        #editor
    .extra.content.hidden#tags
      .ui.form
        .fluid.field
          .ui.multiple.search.selection.dropdown(multiple="")
            input(type="hidden", name="tags")
            i.dropdown.icon
            .default.text Tagsâ€¦
            .menu
              template(is="dom-repeat", items="{{topics}}")
                .item.title(data-value$="{{item.id}}", href$="{{item.link}}")
                  strong.header
                    small.prefix &#35;
                    span {{item.id}}
                  p {{item.description}}
    .extra.content.hidden#source
      form.ui.form
        .field
          textarea {{source}}
    .extra.content.hidden#metadata
      a.right.floated.author(href$="{{data.author.link}}")
        img(src$="{{data.author.image}}")
        span {{data.author.id}}
      a.timestamp(href$="{{data.link}}")
        i.linkify.icon
        span {{_prettyDate(data.changed)}}

  script.
    Polymer({
      is: 'quill-draft-card',
      properties: {
        status: { type: String },
        topics: { type: Array },
        src: { type: String , observer: '_load' },
        data: { type: Object , observer: '_dataChanged' , value: {} , notify: true },
        state: { type: String },
        source: { type: String , observer: '_sourceChanged' },
        output: { type: String },
        actions: { type: Object , value: {} },
        placeholders: { type: Array , value: [] }
      },
      _respondToInput: function() {
        var self = this;
        var content = self.editor.getContent();
        if (content.length > 0) {
          self._save(function(err, obj) {
            self.set('data', obj);
            self._showMetadata();
          });
        }
      },
      _prettyDate: function(input) {
        return moment(input).fromNow();
      },
      _lowerCard: function() {
        $(this).removeClass('raised');
      },
      _raiseCard: function() {
        $(this).addClass('raised');
      },
      _showMetadata: function() {
        $(this.$.metadata).slideDown();
      },
      _enableEditing: function() {
        var self = this;
        console.log('[QUILL:DRAFT-CARD]', '_enableEditing');
        self._createEditor();
      },
      _toggleSourceView: function() {
        $(this.$.source).slideToggle();
      },
      _dataChanged: function(data, old) {
        console.log('[QUILL:DRAFT-CARD]', 'data:change', data);
      },
      _render: function() {
        var self = this;
        console.log('[QUILL:WRITER]', '_render', self.source);
        self.$.editor.innerHTML = window.markdown(self.source || '');
      },
      _sourceChanged: function(source, old) {
        var self = this;
        self._render();
      },
      _guid: function guid() {
        function s4() {
          return Math.floor((1 + Math.random()) * 0x10000)
            .toString(16)
            .substring(1);
        }
        return s4() + s4() + s4() + s4() + s4() + s4() + s4() + s4();
      },
      _collectTags: function() {
        var self = this;
        // TODO: use procure
        $.getJSON('https://maki.io/topics', function(topics) {
          self.topics = topics.map(function(topic) {
            topic.link = 'https://maki.io/topics/' + topic.id;
            return topic;
          });
          $('.ui.search').dropdown({
            on: 'focus' // TODO: consider proposing change in default upstream
          });
        });
      },
      _load: function(uri, back) {
        var self = this;
        console.log('[QUILL:DRAFT-CARD]', '_load', uri, back);
        self.toggleClass('loading', true);

        // TODO: use this API instead:
        // fabric.get(self.src, function(err, data) { ... });
        var datastore = document.querySelector('maki-datastore[for=quill]');
        datastore._get(self.src, function(err, data) {
          console.log('[QUILL:DRAFT-CARD]', '_load', 'data', data);
          self.set('data', data);
          self.set('source', data.content);

          // TODO: build these from a token
          self.set('actions.edit', data.link + '#edit');
          self.toggleClass('loading', false);
        });

      },
      _save: function(cb) {
        var self = this;
        
        if (!cb) cb = new Function();
        
        if (!self.data.id) {
          self.data.id = self._guid();
        }
        
        var link = '/drafts/' + self.data.id;
        var datastore = document.querySelector('maki-datastore[for=quill]');
        var now = (new Date()).getTime();
        var draft = {
          id: self.data.id,
          link: link,
          content: self.$.source.value,
          changed: now,
          cursor: self.cursor
        };
        
        datastore._get(link, function(err, doc) {
          console.log('[QUILL:WRITER]', '_save', '_get', 'found:', err, doc);
          if (!doc || !doc.length) {
            var fresh = true;
            draft.created = now;
          }

          datastore._put(link, draft, function(err, obj) {
            if (fresh) {
              datastore._insert('/drafts', obj, function(err, other) {
                console.log('[QUILL:WRITER]', '_save', '_insert', 'finished', err, other);
                cb(err, draft);
              });
            } else {
              cb(err, draft);
            }
          });
        });
      },
      _createEditor: function() {
        var self = this;
        
        console.log('[QUILL:DRAFT-CARD]', '_createEditor');

        self.editor = new MediumEditor(self.$.editor, {
          activeButtonClass: 'active',
          buttonLabels: 'fontawesome',
          extensions: {
            markdown: new MeMarkdown(function (md) {
              self.$.source.value = md;
              //-self.$.viewer.innerText = md;
            }),
            'multi_placeholder': new MediumEditorMultiPlaceholders({
              placeholders: self.placeholders
            })
          },
          placeholder: false,
          toolbar: {
            // originals from:
            // https://github.com/yabwe/medium-editor/blob/master/src/js/defaults/buttons.js
            buttons: [
              {
                name: 'h1',
                action: 'append-h1',
                aria: 'header type one',
                tagNames: ['h1'],
                classList: ['ui', 'tooltipped', 'button'],
                contentDefault: '<b>H1</b>',
                contentFA: '<i class="icon header"><sup>1</sup>'
              },
              {
                name: 'h2',
                action: 'append-h2',
                aria: 'header type two',
                tagNames: ['h2'],
                classList: ['ui', 'tooltipped', 'button'],
                contentDefault: '<b>H2</b>',
                contentFA: '<i class="icon header"><sup>2</sup>'
              },
              {
                name: 'h3',
                action: 'append-h3',
                aria: 'header type three',
                tagNames: ['h3'],
                classList: ['ui', 'tooltipped', 'button'],
                contentDefault: '<b>H3</b>',
                contentFA: '<i class="icon header"><sup>3</sup>'
              },
              {
                name: 'bold',
                action: 'bold',
                aria: 'bold',
                tagNames: ['b', 'strong'],
                classList: ['ui', 'tooltipped', 'button'],
                style: {
                  prop: 'font-weight',
                  value: '700|bold'
                },
                useQueryState: true,
                contentDefault: '<b>B</b>',
                contentFA: '<i class="icon bold"></i>'
              },
              {
                name: 'italic',
                action: 'italic',
                aria: 'italic',
                tagNames: ['i', 'em'],
                classList: ['ui', 'tooltipped', 'button'],
                style: {
                  prop: 'font-style',
                  value: 'italic'
                },
                useQueryState: true,
                contentDefault: '<b><i>I</i></b>',
                contentFA: '<i class="icon italic"></i>'
              },
              {
                name: 'underline',
                action: 'underline',
                aria: 'underline',
                tagNames: ['u'],
                classList: ['ui', 'tooltipped', 'button'],
                style: {
                  prop: 'text-decoration',
                  value: 'underline'
                },
                useQueryState: true,
                contentDefault: '<b><u>U</u></b>',
                contentFA: '<i class="icon underline"></i>'
              },
              {
                name: 'strikethrough',
                action: 'strikethrough',
                aria: 'strike through',
                tagNames: ['strike'],
                classList: ['ui', 'tooltipped', 'button'],
                style: {
                  prop: 'text-decoration',
                  value: 'line-through'
                },
                useQueryState: true,
                contentDefault: '<s>A</s>',
                contentFA: '<i class="icon strikethrough"></i>'
              },
              /*{
                name: 'superscript',
                action: 'superscript',
                aria: 'superscript',
                tagNames: ['sup'],
                classList: ['ui', 'tooltipped', 'button'],
                contentDefault: '<b>x<sup>1</sup></b>',
                contentFA: '<i class="icon superscript"></i>'
              },
              {
                name: 'subscript',
                action: 'subscript',
                aria: 'subscript',
                tagNames: ['sub'],
                classList: ['ui', 'tooltipped', 'button'],
                contentDefault: '<b>x<sub>1</sub></b>',
                contentFA: '<i class="icon subscript"></i>'
              },*/
              {
                name: 'image',
                action: 'image',
                aria: 'image',
                tagNames: ['img'],
                classList: ['ui', 'tooltipped', 'button'],
                contentDefault: '<b>image</b>',
                contentFA: '<i class="icon picture"></i>'
              },
              {
                name: 'orderedlist',
                action: 'insertorderedlist',
                aria: 'ordered list',
                tagNames: ['ol'],
                classList: ['ui', 'tooltipped', 'button'],
                useQueryState: true,
                contentDefault: '<b>1.</b>',
                contentFA: '<i class="icon list ordered"></i>'
              },
              {
                name: 'unorderedlist',
                action: 'insertunorderedlist',
                aria: 'unordered list',
                tagNames: ['ul'],
                classList: ['ui', 'tooltipped', 'button'],
                useQueryState: true,
                contentDefault: '<b>&bull;</b>',
                contentFA: '<i class="icon list unordered"></i>'
              },
              /*{
                name: 'indent',
                action: 'indent',
                aria: 'indent',
                tagNames: [],
                classList: ['ui', 'tooltipped', 'button'],
                contentDefault: '<b>&rarr;</b>',
                contentFA: '<i class="icon indent"></i>'
              },
              {
                name: 'outdent',
                action: 'outdent',
                aria: 'outdent',
                tagNames: [],
                classList: ['ui', 'tooltipped', 'button'],
                contentDefault: '<b>&larr;</b>',
                contentFA: '<i class="icon outdent"></i>'
              },
              {
                name: 'justifyCenter',
                action: 'justifyCenter',
                aria: 'center justify',
                tagNames: [],
                classList: ['ui', 'tooltipped', 'button'],
                style: {
                  prop: 'text-align',
                  value: 'center'
                },
                contentDefault: '<b>C</b>',
                contentFA: '<i class="icon align center"></i>'
              },
              {
                name: 'justifyFull',
                action: 'justifyFull',
                aria: 'full justify',
                tagNames: [],
                classList: ['ui', 'tooltipped', 'button'],
                style: {
                  prop: 'text-align',
                  value: 'justify'
                },
                contentDefault: '<b>J</b>',
                contentFA: '<i class="icon align justify"></i>'
              },
              {
                name: 'justifyLeft',
                action: 'justifyLeft',
                aria: 'left justify',
                tagNames: [],
                classList: ['ui', 'tooltipped', 'button'],
                style: {
                  prop: 'text-align',
                  value: 'left'
                },
                contentDefault: '<b>L</b>',
                contentFA: '<i class="icon align left"></i>'
              },
              {
                name: 'justifyRight',
                action: 'justifyRight',
                aria: 'right justify',
                tagNames: [],
                classList: ['ui', 'tooltipped', 'button'],
                style: {
                  prop: 'text-align',
                  value: 'right'
                },
                contentDefault: '<b>R</b>',
                contentFA: '<i class="icon align right"></i>'
              },*/
              // Known inline elements that are not removed, or not removed consistantly across browsers:
              // <span>, <label>, <br>
              /*{
                name: 'removeFormat',
                aria: 'remove formatting',
                action: 'removeFormat',
                contentDefault: '<b>X</b>',
                classList: ['ui', 'tooltipped', 'button'],
                contentFA: '<i class="icon eraser"></i>'
              },*/

              /***** Buttons for appending block elements (append-<element> action) *****/

              {
                name: 'quote',
                action: 'append-blockquote',
                aria: 'blockquote',
                tagNames: ['blockquote'],
                classList: ['ui', 'tooltipped', 'button'],
                contentDefault: '<b>&ldquo;</b>',
                contentFA: '<i class="icon quote right"></i>'
              },
              {
                name: 'pre',
                action: 'append-pre',
                aria: 'preformatted text',
                tagNames: ['pre'],
                classList: ['ui', 'tooltipped', 'button'],
                contentDefault: '<b>0101</b>',
                contentFA: '<i class="icon code"></i>'
              },
              /*{
                name: 'h4',
                action: 'append-h4',
                aria: 'header type four',
                tagNames: ['h4'],
                classList: ['ui', 'tooltipped', 'button'],
                contentDefault: '<b>H4</b>',
                contentFA: '<i class="icon header"><sup>4</sup>'
              },
              {
                name: 'h5',
                action: 'append-h5',
                aria: 'header type five',
                tagNames: ['h5'],
                classList: ['ui', 'tooltipped', 'button'],
                contentDefault: '<b>H5</b>',
                contentFA: '<i class="icon header"><sup>5</sup>'
              },
              {
                name: 'h6',
                action: 'append-h6',
                aria: 'header type six',
                tagNames: ['h6'],
                classList: ['ui', 'tooltipped', 'button'],
                contentDefault: '<b>H6</b>',
                contentFA: '<i class="icon header"><sup>6</sup>'
              }*/
            ]
          },
        });
        
        self.editor.subscribe('editableInput', function(event, editable) {
          console.log('[QUILL:WRITER]', 'editableInput');
          self._respondToInput();
        });

      },
      ready: function() {
        console.log('[QUILL:DRAFT-CARD]', 'ready');
      }
    });
