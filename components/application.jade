dom-module#maki-application
  template
    style.
      :host ::content .brand {
        font-family: 'Playball', cursive;
        margin-right: 0.2em;
        -webkit-transition-property: text-shadow;
        -webkit-transition-duration: 1s;
        -webkit-transition-timing-function: ease-in-out;
        transition-property: text-shadow;
        transition-duration: 1s;
        transition-timing-function: ease-in-out;
      }
      
      :host ::content .inverted .brand {
        color: #fff;
      }
      
      :host ::content .brand:hover {
        text-shadow: 0 0 0.5em #fff;
        -webkit-transition-property: text-shadow;
        -webkit-transition-duration: 1s;
        -webkit-transition-timing-function: ease-in-out;
        transition-property: text-shadow;
        transition-duration: 1s;
        transition-timing-function: ease-in-out;
      }

      :host ::content maki-masthead maki-navbar .logo.brand.item {
        margin-right: 2em !important;
      }

      :host ::content maki-masthead .brand.normal {
        font-size: 1.3em;
        position: absolute;
        top: 0;
        left: 0px;
        padding-right: 1em;
      }

      :host ::content maki-masthead .brand:not(.normal) {
        font-size: 1.2em;
      }
      
      :host ::content maki-masthead maki-navbar .logo.item img {
        margin-right: 0.5em !important;
      }

    maki-content-store(name="#{config.service.namespace}")
    maki-datastore(name="#{config.service.namespace}", for="#{config.service.namespace}")
    maki-channel(autoconnect, reconnect="true")
    //-maki-service
    //-maki-peer-manager(autoconnect, limit="128", strategy="lowest-latency")

    maki-navbar.ui.large.top.fixed.hidden.menu
    maki-sidebar.ui.vertical.inverted.sidebar.right.large.menu

    maki-masthead#masthead(narrow="true", centered="true")
    maki-viewport#viewport

    .ui.inverted.vertical.footer.segment
      quill-footer.ui.container

    maki-analytics

  script(src="/js/page.min.js", async)
  script(src="/assets/objectid.js", async)
  script(src="/assets/async.min.js", async)
  script.
    window.maki = Polymer({
      is: 'maki-application',
      properties: {
        src: { type: String },
        for: { type: String },
        route: { type: String },
        routes: { type: Object, value: {} },
        components: { type: Object, value: {} },
        resources: { type: Object, observer: '_resourcesUpdated' },
        datastore: { type: Object },
        config: { type: Object },
        worker: { type: Object },
        identity: { type: Object, notify: true },
        state: { type: String }
      },
      _pathToResource: function(path) {
        var self = this;
        var resource = null;
        
        console.log('[QUILL:APPLICATION]', '_pathToResource', path);
        
        for (var route in self.routes) {
          var regex = self.routes[route];
          
          console.log('[QUILL:APPLICATION]', '_pathToResource', 'testing', regex);
          
          if (regex.test(path)) {
            resource = self.resourceMap[route];
            break;
          }
        }

        console.log('[QUILL:APPLICATION]', '_pathToResource', path, 'finally:', resource);
        
        return resource;
      },
      _route: function(ctx) {
        var self = this;
        var viewport = this.$.viewport;
        var component = 'maki-undefined';
        var masthead = null;
        var view = null;

        if (!viewport) {
          console.warn('[MAKI:APPLICATION]', 'no viewport provided');
          return false;
        }
        
        viewport.toggleClass('loading', true);
        self.$.masthead.toggleClass('loading', true);

        for (var route in self.routes) {
          var regex = self.routes[route];
          
          console.log('[MAKI:APPLICATION]', '_route', 'routing', route, regex);
          console.log('[MAKI:APPLICATION]', '_route', 'comparing...', ctx.path);
          
          if (regex.test(ctx.path)) {
            masthead = self.resourceMap[route].options.components.masthead;
            
            component = self.components[route];
            view = document.createElement(component);
            
            console.log('[MAKI:APPLICATION]', '_route', 'found:', component);
            console.log('[MAKI:APPLICATION]', '_route', 'selected:', view);
            console.log('[MAKI:APPLICATION]', '_route', 'masthead:', masthead);

            view.action = self.actionMap[route];
            view.type = self.resourceMap[route];
            view.type.route = route;

            break;
          }
        }

        if (!view) {
          view = document.createElement(component);
        }
        
        view.setAttribute('src', ctx.path);
        
        if (!view.type) console.log('wat?  no view type?', ctx.path , view);
        view.setAttribute('type', view.type.name);

        while (viewport.hasChildNodes()) {
          viewport.removeChild(viewport.lastChild);
        }

        viewport.appendChild(view);
        viewport.toggleClass('loading', false);

        // handle masthead, if it exists
        if (masthead) {
          console.log('[MAKI:APPLICATION]', '_route', 'using component', masthead);
          self.$.masthead.setAttribute('src', ctx.path);
          self.$.masthead.setAttribute('component', masthead);
        } else {
          self.$.masthead.removeAttribute('component');
        }
        
        self.$.masthead.toggleClass('loading', false);

      },
      /*
          Configures the Router, which provides human-friendly URLs 
      
       */
       _resourcesUpdated: function(resources) {
         var self = this;
         var _route = self._route.bind(self);
         
         self.resourceMap = {};
         self.actionMap = {};
         
         console.log('[MAKI:APPLICATION]', '_resourcesUpdated', resources);
         
         Object.keys(resources).forEach(function(name) {
           var definition = resources[name];
           
           console.log('[MAKI:APPLICATION]', '_resourcesUpdated', 'definition', definition);
           
           ['get', 'query'].forEach(function(action) {
             var route = definition.routes[action];
             if (!route) return;
             
             self.routes[route] = new RegExp(eval(definition.paths[action]));
             self.components[route] = definition.components[action];
             self.resourceMap[route] = definition;
             self.actionMap[route] = action;
             
             page(route, _route);
           });
         });
         
         self.routes['/'] = new RegExp(/^\/$/);
         self.components['/'] = (resources.Index && resources.Index.components) ? resources.Index.components.query : 'maki-index';
         
         page('/', _route);
         page('*', _route);
         
         page();
       },
       created: function() {
         var self = this;
         console.log('[MAKI:APPLICATION]', 'created');
         self.route = window.location.pathname;
         //self.worker = new Worker('/worker.js');
         // load the application configuration
         $.ajax({
           type: 'OPTIONS',
           url: '/',
           headers: {
             'Accept': 'application/json'
           },
           success: function(data) {
             self.config = data.config;
             self.resources = data.resources;
             self.$.masthead.data = data.service;
           }
         });
       },
       ready: function() {
         console.log('[MAKI:APPLICATION]', 'ready');

         $('.tooltipped').popup();
         // fix menu when passed
         $('.masthead').visibility({
           once: false,
           onBottomPassed: function() {
             $('.fixed.menu').transition('fade in');
           },
           onBottomPassedReverse: function() {
             $('.fixed.menu').transition('fade out');
           }
         });

         // create sidebar and attach to menu open
         $('.ui.sidebar').sidebar('attach events', '.toc.item');

       }
    });
